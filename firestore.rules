rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      allow get;
      allow create: if isSigneIn() && isNotExist();
      allow update: if request.auth.uid == userId;
    }

    match /posts/{postId} {
      allow read;
      allow create: if isSigneIn() && isNotExist();
      allow update: if isSigneIn() && (request.auth.uid == resource.data.userId) || (userRank(postId));
      allow delete: if isSigneIn() && request.auth.uid == resource.data.userId;
    }

    match /comments/{postId} {
      allow read;
      allow create: if isSigneIn();
      allow update: if isSigneIn();
    }


    function isSigneIn() {
      return request.auth != null;
    }

    function isNotExist() {
      return resource == null;
    }

    function userRank(postId) {
      return request.writeFields.size() == 1 && ('score' in request.writeFirelds)
             && !(postId in (get(/databases/$(database)/documents/users/$(request.auth.uid)).data).postRanked);
    }
  }

  // &&!(postId in request.resource.data.comments);
  // allow update: if isSigneIn() && ('rank' in request.writeFields);
}
